Egdataset:
  computed: cifar10
  is_explicitly_specified: true
  is_hyperparam: null
  is_meta: null
  name: Egdataset
  options: []
  order: 5
  type: <module 'torchvision.datasets' from 'E:\\Work_software\\python\\lib\\site-packages\\torchvision\\datasets\\__init__.py'>
  value: cifar10
batch_size:
  computed: null
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: batch_size
  options: []
  order: -1
  type: <class 'int'>
  value: null
criterion:
  computed: null
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: criterion
  options: []
  order: -1
  type: <module 'torch.nn.modules.loss' from 'E:\\Work_software\\python\\lib\\site-packages\\torch\\nn\\modules\\loss.py'>
  value: null
data_dir:
  computed: ./data
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: data_dir
  options: []
  order: 6
  type: <class 'str'>
  value: null
device:
  computed: cpu
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: device
  options: []
  order: 2
  type: <class 'torch.device'>
  value: null
device.cuda_device:
  computed: 0
  is_explicitly_specified: false
  is_hyperparam: false
  is_meta: null
  name: cuda_device
  options: []
  order: 3
  type: <class 'int'>
  value: null
device.device:
  computed: cpu
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: device
  options:
  - _device
  order: 0
  type: <class 'torch.device'>
  value: null
device.device_info:
  computed: CPU
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: device_info
  options:
  - _device_info
  order: 1
  type: <class 'labml_helpers.device.DeviceInfo'>
  value: null
device.use_cuda:
  computed: true
  is_explicitly_specified: false
  is_hyperparam: false
  is_meta: null
  name: use_cuda
  options: []
  order: 2
  type: <class 'bool'>
  value: null
emb_dim:
  computed: null
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: emb_dim
  options: []
  order: -1
  type: <class 'int'>
  value: null
imgsize:
  computed: null
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: imgsize
  options: []
  order: -1
  type: <class 'int'>
  value: null
layers_block:
  computed:
  - 3
  - 4
  - 6
  - 3
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: layers_block
  options: []
  order: 1
  type: <class 'list'>
  value: null
learning_rate:
  computed: null
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: learning_rate
  options: []
  order: -1
  type: <class 'float'>
  value: null
model:
  computed: "ResNet(\n  (conv1): Sequential(\n    (0): Conv2d(3, 64, kernel_size=(7,\
    \ 7), stride=(2, 2), padding=(3, 3))\n    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1,\
    \ affine=True, track_running_stats=True)\n    (2): ReLU()\n  )\n  (maxpool): MaxPool2d(kernel_size=3,\
    \ stride=2, padding=1, dilation=1, ceil_mode=False)\n  (layer0): Sequential(\n\
    \    (0): ResidualBlock(\n      (conv1): Sequential(\n        (0): Conv2d(64,\
    \ 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (1): BatchNorm2d(64,\
    \ eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (2):\
    \ ReLU()\n      )\n      (conv2): Sequential(\n        (0): Conv2d(64, 64, kernel_size=(3,\
    \ 3), stride=(1, 1), padding=(1, 1))\n        (1): BatchNorm2d(64, eps=1e-05,\
    \ momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (relu):\
    \ ReLU()\n    )\n    (1): ResidualBlock(\n      (conv1): Sequential(\n       \
    \ (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n   \
    \     (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
    \        (2): ReLU()\n      )\n      (conv2): Sequential(\n        (0): Conv2d(64,\
    \ 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (1): BatchNorm2d(64,\
    \ eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n \
    \     (relu): ReLU()\n    )\n    (2): ResidualBlock(\n      (conv1): Sequential(\n\
    \        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n\
    \        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
    \        (2): ReLU()\n      )\n      (conv2): Sequential(\n        (0): Conv2d(64,\
    \ 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (1): BatchNorm2d(64,\
    \ eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n \
    \     (relu): ReLU()\n    )\n  )\n  (layer1): Sequential(\n    (0): ResidualBlock(\n\
    \      (conv1): Sequential(\n        (0): Conv2d(64, 128, kernel_size=(3, 3),\
    \ stride=(2, 2), padding=(1, 1))\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1,\
    \ affine=True, track_running_stats=True)\n        (2): ReLU()\n      )\n     \
    \ (conv2): Sequential(\n        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1,\
    \ 1), padding=(1, 1))\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1,\
    \ affine=True, track_running_stats=True)\n      )\n      (downsample): Sequential(\n\
    \        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2))\n        (1):\
    \ BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
    \      )\n      (relu): ReLU()\n    )\n    (1): ResidualBlock(\n      (conv1):\
    \ Sequential(\n        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1),\
    \ padding=(1, 1))\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True,\
    \ track_running_stats=True)\n        (2): ReLU()\n      )\n      (conv2): Sequential(\n\
    \        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1,\
    \ 1))\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
    \      )\n      (relu): ReLU()\n    )\n    (2): ResidualBlock(\n      (conv1):\
    \ Sequential(\n        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1),\
    \ padding=(1, 1))\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True,\
    \ track_running_stats=True)\n        (2): ReLU()\n      )\n      (conv2): Sequential(\n\
    \        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1,\
    \ 1))\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
    \      )\n      (relu): ReLU()\n    )\n    (3): ResidualBlock(\n      (conv1):\
    \ Sequential(\n        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1),\
    \ padding=(1, 1))\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True,\
    \ track_running_stats=True)\n        (2): ReLU()\n      )\n      (conv2): Sequential(\n\
    \        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1,\
    \ 1))\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
    \      )\n      (relu): ReLU()\n    )\n  )\n  (layer2): Sequential(\n    (0):\
    \ ResidualBlock(\n      (conv1): Sequential(\n        (0): Conv2d(128, 256, kernel_size=(3,\
    \ 3), stride=(2, 2), padding=(1, 1))\n        (1): BatchNorm2d(256, eps=1e-05,\
    \ momentum=0.1, affine=True, track_running_stats=True)\n        (2): ReLU()\n\
    \      )\n      (conv2): Sequential(\n        (0): Conv2d(256, 256, kernel_size=(3,\
    \ 3), stride=(1, 1), padding=(1, 1))\n        (1): BatchNorm2d(256, eps=1e-05,\
    \ momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (downsample):\
    \ Sequential(\n        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2))\n\
    \        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
    \      )\n      (relu): ReLU()\n    )\n    (1): ResidualBlock(\n      (conv1):\
    \ Sequential(\n        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1),\
    \ padding=(1, 1))\n        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True,\
    \ track_running_stats=True)\n        (2): ReLU()\n      )\n      (conv2): Sequential(\n\
    \        (0): Conv2d(256, 256, k [[...]]"
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: model
  options:
  - Resnet
  order: 0
  type: <class 'torch.nn.modules.module.Module'>
  value: null
num_classes:
  computed: null
  is_explicitly_specified: true
  is_hyperparam: null
  is_meta: null
  name: num_classes
  options: []
  order: -1
  type: <class 'int'>
  value: 10
num_epochs:
  computed: 20
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: num_epochs
  options: []
  order: 3
  type: <class 'int'>
  value: null
optimizer:
  computed: null
  is_explicitly_specified: true
  is_hyperparam: null
  is_meta: null
  name: optimizer
  options:
  - adam_optimizer
  - sgd_optimizer
  order: -1
  type: <class 'torch.optim.optimizer.Optimizer'>
  value: sgd_optimizer
train_batch_size:
  computed: 64
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: train_batch_size
  options: []
  order: 8
  type: <class 'int'>
  value: null
train_loader:
  computed: <torch.utils.data.dataloader.DataLoader object at 0x00000135D571E9E0>
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: train_loader
  options:
  - data_loaders
  order: 4
  type: <class 'torch.utils.data.dataloader.DataLoader'>
  value: null
train_log_interval:
  computed: null
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: train_log_interval
  options: []
  order: -1
  type: <class 'int'>
  value: null
transform:
  computed: "Compose(\n    Resize(size=(224, 224), interpolation=bilinear, max_size=None,\
    \ antialias=None)\n    ToTensor()\n    Normalize(mean=[0.4914, 0.4822, 0.4465],\
    \ std=[0.2023, 0.1994, 0.201])\n)"
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: transform
  options: []
  order: 7
  type: <class 'torchvision.transforms.transforms.Compose'>
  value: null
valid_batch_size:
  computed: null
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: valid_batch_size
  options: []
  order: -1
  type: <class 'int'>
  value: null
valid_loader:
  computed: <torch.utils.data.dataloader.DataLoader object at 0x00000135E37945B0>
  is_explicitly_specified: false
  is_hyperparam: null
  is_meta: null
  name: valid_loader
  options:
  - data_loaders
  order: -1
  type: <class 'torch.utils.data.dataloader.DataLoader'>
  value: null
